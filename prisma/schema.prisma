generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  clerkId     String?    @unique
  email       String?    @unique
  firstName   String?
  lastName    String?
  role        String     @default("user")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  address     String?
  fullName    String?
  parentName  String?
  parentPhone String?
  parentEmail String?
  password    String?
  username    String?    @unique
  Exercise    Exercise[]
  roadmap     Roadmap?

  status             UserStatus @default(ACTIVATE)
  userClasses        UserClass[]
  userExerciseResult UserExerciseResult[]
  UserRoadmap        UserRoadmap[]
  userTopicProgress  UserTopicProgress[]
  userVocabProgress  UserVocabProgress[]
  notifications      Notification[]
  feedbackGiven      FeedBackStudent[] @relation(name: "TeacherFeedback")
  feedbackReceived   FeedBackStudent[] @relation(name: "StudentFeedback")
}

model Class {
  id          String         @id @default(uuid())
  name        String
  code        String         @unique
  description String?
  level       ClassLevel
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  roadmaps    ClassRoadmap[]
  userClasses UserClass[]
  feedbacks   FeedBackStudent[]
}

model UserClass {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  role      UserClassRole
  userId    String
  classId   String
  class     Class         @relation(fields: [classId], references: [id])
  user      User          @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
  @@index([classId], map: "UserClass_classId_fkey")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model ClassRoadmap {
  id         String   @id @default(uuid())
  classId    String
  roadmapId  String
  assignedAt DateTime @default(now())
  class      Class    @relation(fields: [classId], references: [id])
  roadmap    Roadmap  @relation(fields: [roadmapId], references: [id])

  @@unique([classId, roadmapId])
  @@index([roadmapId], map: "ClassRoadmap_roadmapId_fkey")
}

model Roadmap {
  id            String         @id @default(cuid())
  name          String
  is_deleted    Boolean        @default(false)
  deleted_at    DateTime?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  categoryId    String?
  isNew         Boolean        @default(false)
  description   String?
  isWordSpace   Boolean        @default(false)
  userId        String?        @unique
  classRoadmaps ClassRoadmap[]
  category      Category?      @relation("CategoryToRoadmaps", fields: [categoryId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])
  topics        Topic[]
  UserRoadmap   UserRoadmap[]

  @@index([categoryId], map: "Roadmap_categoryId_fkey")
}

model Topic {
  id                String              @id @default(cuid())
  roadmapId         String
  title             String
  description       String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  coverImage        String?
  suggestionLevel   String?
  status            TopicStatus         @default(INIT)
  Document          Document[]
  Exercise          Exercise[]
  personalLearnings PersonalLearning[]
  roadmap           Roadmap             @relation(fields: [roadmapId], references: [id])
  userTopicProgress UserTopicProgress[]
  Vocab             Vocab[]

  @@index([roadmapId], map: "Topic_roadmapId_fkey")
}

model UserRoadmap {
  userId    String
  roadmapId String
  createdAt DateTime @default(now())
  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roadmapId])
  @@index([roadmapId], map: "UserRoadmap_roadmapId_fkey")
}

model UserTopicProgress {
  userId      String
  topicId     String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  topic       Topic     @relation(fields: [topicId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, topicId])
  @@index([topicId], map: "UserTopicProgress_topicId_fkey")
}

model UserVocabProgress {
  id         String  @id @default(cuid())
  vocabId    String
  userId     String
  is_learned Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  vocab      Vocab   @relation(fields: [vocabId], references: [id])

  @@unique([userId, vocabId])
  @@index([userId])
  @@index([vocabId])
}

model UserExerciseResult {
  id          String   @id @default(cuid())
  userId      String
  exerciseId  String
  answer      String
  isCorrect   Boolean  @default(false)
  submittedAt DateTime @default(now())
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([exerciseId])
}

model PersonalLearning {
  id          String  @id @default(cuid())
  userId      String
  topicId     String
  title       String?
  description String?
  image       String?
  topic       Topic   @relation(fields: [topicId], references: [id])
  vocabs      Vocab[]

  @@index([userId])
  @@index([topicId])
}

model Vocab {
  id                 String              @id @default(cuid())
  topicId            String
  word               String
  meaning            String
  example            String?
  imageUrl           String?
  audioUrl           String?
  is_know            Boolean             @default(false)
  is_deleted         Boolean             @default(false)
  created_at         DateTime            @default(now())
  updated_at         DateTime?
  personalLearningId String?
  userVocabProgress  UserVocabProgress[]
  personalLearning   PersonalLearning?   @relation(fields: [personalLearningId], references: [id])
  Topic              Topic               @relation(fields: [topicId], references: [id])

  @@index([topicId], map: "Vocab_topicId_fkey")
  @@index([personalLearningId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String
  description String?
  order       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  roadmaps    Roadmap[] @relation("CategoryToRoadmaps")
}

model Document {
  id          String          @id
  name        String
  description String?
  topicId     String
  status      Document_status @default(ACTIVATE)
  created_at  DateTime        @default(now())
  updated_at  DateTime
  file        String
  Topic       Topic           @relation(fields: [topicId], references: [id])

  @@index([topicId], map: "Document_topicId_fkey")
}

model Exercise {
  id                 String               @id @default(cuid())
  userId             String
  content            String               @db.Text
  correctAnswer      String
  difficulty         Difficulty?
  hint               String?
  options            Json?
  topicId            String
  type               ExerciseType
  topic              Topic                @relation(fields: [topicId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  userExerciseResult UserExerciseResult[]

  @@index([topicId])
  @@index([userId])
}

model FeedBackStudent {
  id                 String               @id @default(cuid())
  studentId              String
  teacherId          String
  classId            String
  class               Class         @relation(fields: [classId], references: [id])
  student             User          @relation(name: "StudentFeedback", fields: [studentId], references: [id]) 
  teacher             User          @relation(name: "TeacherFeedback", fields: [teacherId], references: [id]) 
  content             String

  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
}

enum ExerciseType {
  text
  image
  audio
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum TopicStatus {
  INIT
  SETTUPED
  REMOVED
}

enum Document_status {
  ACTIVATE
  DISABLE
}

enum ClassLevel {
  STARTERS
  MOVERS
  FLYERS
}

enum UserClassRole {
  TEACHER
  STUDENT
}

enum UserStatus {
  ACTIVATE
  DEACTIVATE
}
