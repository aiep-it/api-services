generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  clerkId           String?             @unique
  email             String?             @unique
  firstName         String?
  lastName          String?
  role              String              @default("user")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  address           String?
  fullName          String?
  parentName        String?
  parentPhone       String?
  password          String?
  username          String?             @unique
  classId           String?
  ClassTeacher      ClassTeacher[]
  Exercise          Exercise[]
  roadmap           Roadmap?
  Class             Class?              @relation(fields: [classId], references: [id])
  UserRoadmap       UserRoadmap[]
  userTopicProgress UserTopicProgress[]
  userVocabProgress UserVocabProgress[]

  @@index([classId], map: "User_classId_fkey")
}

model Roadmap {
  id           String         @id @default(cuid())
  name         String
  is_deleted   Boolean        @default(false)
  deleted_at   DateTime?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  categoryId   String?
  isNew        Boolean        @default(false)
  description  String?
  isWordSpace  Boolean        @default(false)
  userId       String?        @unique
  ClassRoadmap ClassRoadmap[]
  category     Category?      @relation("CategoryToRoadmaps", fields: [categoryId], references: [id])
  user         User?          @relation(fields: [userId], references: [id])
  topics       Topic[]
  UserRoadmap  UserRoadmap[]

  @@index([categoryId], map: "Roadmap_categoryId_fkey")
}

model Topic {
  id                String              @id @default(cuid())
  roadmapId         String
  title             String
  description       String?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  coverImage        String?
  suggestionLevel   String?
  status            TopicStatus         @default(INIT)
  Document          Document[]
  Exercise          Exercise[]
  PersonalLearning  PersonalLearning[]
  roadmap           Roadmap             @relation(fields: [roadmapId], references: [id])
  userTopicProgress UserTopicProgress[]
  Vocab             Vocab[]

  @@index([roadmapId], map: "Topic_roadmapId_fkey")
}

model UserTopicProgress {
  userId      String
  topicId     String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  topic       Topic     @relation(fields: [topicId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, topicId])
  @@index([topicId], map: "UserTopicProgress_topicId_fkey")
}

model UserRoadmap {
  userId    String
  roadmapId String
  createdAt DateTime @default(now())
  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roadmapId])
  @@index([roadmapId], map: "UserRoadmap_roadmapId_fkey")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String
  description String?
  order       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  roadmaps    Roadmap[] @relation("CategoryToRoadmaps")
}

model Vocab {
  id                 String              @id @default(cuid())
  topicId            String
  word               String
  meaning            String
  example            String?
  imageUrl           String?
  audioUrl           String?
  is_know            Boolean             @default(false)
  is_deleted         Boolean             @default(false)
  created_at         DateTime            @default(now())
  updated_at         DateTime?
  personalLearningId String?
  userVocabProgress  UserVocabProgress[]
  personalLearning   PersonalLearning?   @relation(fields: [personalLearningId], references: [id])
  Topic              Topic               @relation(fields: [topicId], references: [id])

  @@index([topicId], map: "Vocab_topicId_fkey")
  @@index([personalLearningId], map: "Vocab_personalLearningId_fkey")
}

model UserVocabProgress {
  id         String  @id @default(cuid())
  vocabId    String
  userId     String
  is_learned Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  vocab      Vocab   @relation(fields: [vocabId], references: [id])

  @@index([userId], map: "UserVocabProgress_userId_fkey")
  @@index([vocabId], map: "UserVocabProgress_vocabId_fkey")
}

model PersonalLearning {
  id          String  @id @default(cuid())
  userId      String
  topicId     String
  description String?
  title       String?
  image       String?
  topic       Topic   @relation(fields: [topicId], references: [id])
  vocabs      Vocab[]

  @@index([topicId])
  @@index([userId])
}

model Document {
  id          String          @id
  name        String
  description String?
  topicId     String
  status      Document_status @default(ACTIVATE)
  created_at  DateTime        @default(now())
  updated_at  DateTime
  file        String
  topic       Topic           @relation(fields: [topicId], references: [id])

  @@index([topicId], map: "Document_topicId_fkey")
}

model Exercise {
  id            String       @id @default(cuid())
  userId        String
  content       String       @db.Text
  correctAnswer String
  difficulty    Difficulty?
  hint          String?
  options       Json?
  topicId       String
  type          ExerciseType
  topic         Topic        @relation(fields: [topicId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@index([topicId])
  @@index([userId])
}

model Class {
  id           String         @id
  name         String
  code         String         @unique
  description  String?
  level        Class_level
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ClassRoadmap ClassRoadmap[]
  ClassTeacher ClassTeacher[]
  User         User[]
}

model ClassRoadmap {
  id         String   @id
  classId    String
  roadmapId  String
  assignedAt DateTime @default(now())
  Class      Class    @relation(fields: [classId], references: [id])
  Roadmap    Roadmap  @relation(fields: [roadmapId], references: [id])

  @@unique([classId, roadmapId])
  @@index([roadmapId], map: "ClassRoadmap_roadmapId_fkey")
}

model ClassTeacher {
  id         String   @id
  teacherId  String
  classId    String
  assignedAt DateTime @default(now())
  Class      Class    @relation(fields: [classId], references: [id])
  User       User     @relation(fields: [teacherId], references: [id])

  @@unique([teacherId, classId])
  @@index([classId], map: "ClassTeacher_classId_fkey")
}

enum ExerciseType {
  text
  image
  audio
}

enum Difficulty {
  beginner
  intermediate
  advanced
}

enum TopicStatus {
  INIT
  SETTUPED
  REMOVED
}

enum Document_status {
  ACTIVATE
  DISABLE
}

enum Class_level {
  STARTERS
  MOVERS
  FLYERS
}
