generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(uuid())
  clerkId             String                @unique
  email               String                @unique
  firstName           String?
  lastName            String?
  role                String?               @default("user")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Exercise            Exercise[]
  userNodeProgress    UserNodeProgress[]
  UserRoadmapBookmark UserRoadmapBookmark[]
}

model Roadmap {
  id                  String                @id @default(cuid())
  name                String
  is_deleted          Boolean               @default(false)
  deleted_at          DateTime?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  categoryId          String?
  isNew               Boolean               @default(false)
  description         String?
  nodes               Node[]
  category            Category?             @relation("CategoryToRoadmaps", fields: [categoryId], references: [id])
  UserRoadmapBookmark UserRoadmapBookmark[]

  @@index([categoryId], map: "Roadmap_categoryId_fkey")
}

model Node {
  id               String             @id @default(cuid())
  roadmapId        String
  title            String
  description      String?
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  coverImage       String?
  suggestionLevel  String?
  status           NodeStatus         @default(INIT)
  roadmap          Roadmap            @relation(fields: [roadmapId], references: [id])
  userNodeProgress UserNodeProgress[]
  Vocab            Vocab[]

  @@index([roadmapId], map: "Node_roadmapId_fkey")
}

model UserNodeProgress {
  userId      String
  nodeId      String
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  node        Node      @relation(fields: [nodeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([userId, nodeId])
  @@index([nodeId], map: "UserNodeProgress_nodeId_fkey")
}

model UserRoadmapBookmark {
  userId    String
  roadmapId String
  createdAt DateTime @default(now())
  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roadmapId])
  @@index([roadmapId], map: "UserRoadmapBookmark_roadmapId_fkey")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  type        String
  description String?
  order       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  roadmaps    Roadmap[] @relation("CategoryToRoadmaps")
}

model Vocab {
  id         String   @id @default(cuid())
  nodeId     String
  word       String
  meaning    String
  example    String?
  imageUrl   String?
  audioUrl   String?
  is_know    Boolean  @default(false)
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime
  Node       Node     @relation(fields: [nodeId], references: [id])

  @@index([nodeId], map: "Vocab_nodeId_fkey")
}

model Exercise {
  id           String                @id
  userId       String
  timeStarted  DateTime
  topic        String
  timeEnded    DateTime?
  exerciseType Exercise_exerciseType
  User         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Question     Question[]

  @@index([userId], map: "userId")
}

model Question {
  id                String                @id
  question          String
  answer            String
  exerciseId        String
  isCorrect         Boolean?
  options           Json?
  percentageCorrect Float?
  questionType      Question_questionType
  userAnswer        String
  Exercise          Exercise              @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId], map: "exerciseId")
}

enum NodeStatus {
  INIT
  SETTUPED
  REMOVED
}

enum Exercise_exerciseType {
  mcq
  open_ended
}

enum Question_questionType {
  mcq
  open_ended
}
