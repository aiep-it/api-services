const vocabService = require("../../services/vocab.service");
const aiService = require("../../services/ai.assistant.service");
const topicService = require("../../services/topic.service");
const roadmapService = require("../../services/roadmap.service");

exports.getVocabById = async (req, res) => {
  const { id } = req.params;

  try {
    const vocab = await vocabService.getVocabById(id);
    if (!vocab) {
      return res.status(404).json({ message: "Vocab not found." });
    }
    res.status(200).json(vocab);
  } catch (error) {
    console.error("Error fetching vocab by ID:", error);
    res.status(500).json({ message: "Failed to retrieve vocab." });
  }
};

exports.getAllVocabs = async (req, res) => {
  try {
    const { page = 1, size = 10, search = "", sort, filters } = req.body;
    const result = await vocabService.getAllVocabs(
      parseInt(page),
      parseInt(size),
      search,
      filters,
      sort
    );

    res.status(200).json(result);
  } catch (error) {
    console.error("Error fetching vocabs:", error);
    res.status(500).json({ message: "Failed to retrieve vocabs." });
  }
};

exports.createVocab = async (req, res) => {
  try {
    const newVocab = await vocabService.createVocab(req.body);
    res.status(200).json(newVocab);
  } catch (error) {
    console.error("Error creating vocab:", error);
    res.status(500).json({ message: "Failed to create vocab." });
  }
};

exports.createManyVocabs = async (req, res) => {
  try {
    const newVocabs = await vocabService.createManyVocabs(req.body);
    res.status(200).json(newVocabs);
  } catch (error) {
    console.error("Error creating many vocabs:", error);
    res.status(500).json({ message: "Failed to create many vocabs." });
  }
};

exports.updateVocab = async (req, res) => {
  try {
    const updatedVocab = await vocabService.updateVocab(
      req.params.id,
      req.body
    );
    res.status(200).json(updatedVocab);
  } catch (error) {
    console.error("Error updating vocab:", error);
    res.status(500).json({ message: "Failed to update vocab." });
  }
};

exports.deleteVocab = async (req, res) => {
  try {
    await vocabService.deleteVocab(req.params.id);
    res.status(200).send();
  } catch (error) {
    console.error("Error deleting vocab:", error);
    res.status(500).json({ message: "Failed to delete vocab." });
  }
};
exports.getVocabsByTopicId = async (req, res) => {
  const { topicId } = req.params;
  const { page = 1, size = 10, search = '', sort, filters } = req.body;

  const user = req.user;
  try {
    const result = await vocabService.getVocabsByTopicId(
      topicId,
      parseInt(page),
      parseInt(size),
      search,
      filters,
      sort,
      user?.id || null
    );
    
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching vocabs by topic ID:', error);
    res.status(500).json({ message: 'Failed to retrieve vocabs.' });
  }
};

exports.getAllVocabsByTopicId = async (req, res) => {
  const { topicId } = req.params;

  try {
    const result = await vocabService.getAllVocabsByTopicId(topicId);
    
    res.status(200).json(result);
  } catch (error) {
    console.error('Error fetching all vocabs by topic ID:', error);
    res.status(500).json({ message: 'Failed to retrieve vocabs.' });
  }
};

exports.genVocabsByAIAssistant = async (req, res) => {
  const { topicId } = req.body;

  try {
    if (!topicId) {
      return res.status(400).json({ message: "Missing topicId in request body" });
    }

    const topic = await topicService.getTopicById(topicId);
    if (!topic) {
      return res.status(404).json({ message: "Topic not found" });
    }

    const { title: topicTitle } = topic;

    const listVocabsExist = await vocabService.getAllVocabsByTopicId(topicId);
    
    const wordsExist = listVocabsExist?.map(vocab => vocab.word);
    console.log("Existing vocabs for topic:", listVocabsExist.length);
    const listVocabs = await aiService.generateVocabularyData(topicTitle, listVocabsExist) || [];

    if (!Array.isArray(listVocabs) || listVocabs.length === 0) {
      return res.status(200).json({ message: "No vocabulary generated by AI" });
    }

    // const savedVocabs = await Promise.all(
    //   listVocabs.map(async (vocab) => {
    //     const data = {
    //       word: vocab.word,
    //       meaning: vocab.meaning,
    //       example: vocab.example || null,
    //       imageUrl: vocab.imageUrl || null,
    //       audioUrl: vocab.audioUrl || null,
    //       topicId: topicId,
    //     };

    //     return await vocabService.createVocab(data);
    //   })
    // );

    res.status(200).json({
      message: "Vocabs generated and saved successfully",
      data: listVocabs,
    });
  } catch (error) {
    console.error("genVocabsByAIAssistant error:", error);
    res.status(500).json({
      message: "Internal server error",
      error: error.message || error,
    });
  }
};

exports.getMyVocabLearningProgress = async (req, res) => {
  const user = req.user;

  if (!user) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  try {
    const result = await vocabService.getAllMyVocabs(user.id);
    
    res.status(200).json(result);
  } catch (error) {
    res.status(500).json({ message: 'Failed to retrieve vocabs.' });
  }
}

exports.markVocabAsDone = async (req, res) => {
  const { vocabId } = req.params;
  const userId = req.user.id;

  try {
    if (!userId) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const updatedProgress = await vocabService.markVocabAsLearned(vocabId, userId);

    if (!updatedProgress) {
      return res.status(404).json({ message: "Vocab or UserVocabProgress not found." });
    }

    res.status(200).json({ message: "Vocabulary marked as learned successfully", data: updatedProgress });
  } catch (error) {
    console.error("Error marking vocab as done:", error);
    res.status(500).json({ message: "Failed to mark vocab as done." });
  }
};
